"""
31) Faça um programa que leia dois vetores de 10 elementos. Crie um vetor que seja
a união entre os 2 vetores anteriores, ou seja, que contém os números dos dois vetores. Não deve conter números
repetidos.

"""

v = []
v1 = []
v2 = []

while len(v1) <10:
    valor = int(input(f'Entre com o elemento {len(v1) +1 }/10 do vetor 1: '))
    v1.append(valor)
print()
while len(v2) <10:
    valor = int(input(f'\Entre com o elemento {len(v2) +1 }/10 do vetor 2: '))
    v2.append(valor)

for n in v1:
    if n not in v:
        v.append(n)

for m in v2:
    if m not in v:
        v.append(m)

print(f'\nO Vetor união é: {v}')

"""
32) Leia dois vetores de números inteiros X e Y cada um com 5 elementos (assuma que o usuário
não informa elemtnso repetidos). Calcule e mostre os vetores resultantes em cada caso
abaixo:

Soma entre x e y: Soma de cada elementos de x com o elemento y da mesma posição
Produto entre x e y:
Diferença de x e y
Intersecção entre x e y: Apenas elementos que aparecem nos dois vetores
União entre x e y: todos elementos de x, e todos elementos de y que não estão em x

"""
p=0
t=0
d=0
soma = []
diferenca = []
produto = []
uniao = []
inter = []
v1 = []
v2 = []

while len(v1) <5:
    valor = int(input(f'Entre com o elemento {len(v1) +1 }/5 do vetor 1: '))
    while valor in v1:
        print(f' Número repetido, insira um novo valor: ')
        valor = int(input(f'Entre com o elemento {len(v1) + 1}/5 do vetor 1: '))
    v1.append(valor)

print()
while len(v2) <5:
    valor = int(input(f'\Entre com o elemento {len(v2) +1 }/5 do vetor 2: '))
    while valor in v2:
        print('f Número repetido, insira um novo valor: ')
        valor = int(input(f'\Entre com o elemento {len(v2) + 1}/5 do vetor 2: '))
    v2.append(valor)


# Vetor união

for n in v1:
    if n not in uniao:
        uniao.append(n)

for m in v2:
    if m not in uniao:
        uniao.append(m)

# Vetor intersecção

for z in v1:
    if z in v1 and z in v2:
        inter.append(z)

#Vetor Soma
while t < 5:
    soma4 = v1[t] + v2[t]
    soma.append(soma4)
    t =t+1

#Vetor Diferença
while d < 5:
    dif = v1[d] - v2[d]
    diferenca.append(dif)
    d = d+1

#Vetor Multiplicação
while p < 5:
    pro = v1[p] * v2[p]
    produto.append(pro)
    p = p+1


"""
33) Faça um programa que leia um vetor de 15 posições e compacte, ou seja,
elimine as posições com valor zero. Para isso, todos os elementos a frente do valor
zero, devem ser movidados uma posição para trás no vetor.
"""

vetor = []
a = 0

while len(vetor) < 15:
    valor = int(input(f'Entre com a posição {len(vetor) + 1}/15: '))
    vetor.append(valor)

for n in vetor:
    if n == 0:
        vetor.pop(a)
    a = a+1

print(vetor)



print(f'\nO Vetor união é: {uniao}')
print(f'\nO Vetor intersecção é: {inter}')
print(f'\nO Vetor soma é: {soma}')
print(f'\nO Vetor diferença é: {diferenca}')
print(f'\nO Vetor produto é: {produto}')

"""
34)  Faça um programa pra ler 10 números DIFERENTES a serem armazenados em um vetor.
Os dados deverão ser armazenados no vetor da ordem que forem sendo lidos, sendo que caso o
usuário digite um número repetido, o programa peça um número novo.
Note que cada valor digitado pelo usuário deve ser pesquisado no vetor, verificando
se ele existe entre os números que já foram forncecidos. Exibir na tela o vetor final que foi digitado.

"""

vetor = []

while len(vetor) < 10:
    valor = int(input(f'Entre com a posição {len(vetor) + 1}/10: '))
    while valor in vetor:
        print(f'Este valor já foi digitado, digite um novo número')
        valor = int(input(f'Entre com a posição {len(vetor) + 1}/10: '))
    vetor.append(valor)

print(f'O vetor final é {vetor}')


"""
35)  Faça um programa que leia dois números A e B (POSITIVOS MENORES Que 10.000) e:

a) crie um vetor onde cada posição é um algarismo do número. A primeira posião é o
algarismo menos significativo

b) Crie um vetor que seja a soma de A e B, mas faça-o usando apenas os vetores construídos
anteriormente

"""
vetor_a = []
vetor_b = []
vetor_final = []


#Redundante e com alguns erros

a = int(input(f'A) Entre com um número maior que 0 e menor que 10.000: '))
while a >= 10000 or a < 1:
    a = int(input(f'A) Entre com um número maior que 0 e menor que 10.000: '))

b = int(input(f'B) Entre com um número maior que 0 e menor que 10.000: '))
while b > 10000 or b < 1:
    b = int(input(f'B) Entre com um número maior que 0 e menor que 10.000: '))

# Criando vetor A

da1 = a // 1000
dra1 = a % 1000
if da1 >= 1:
    vetor_a.append(da1)
else:
    vetor_a.append(0)

da2 = dra1 // 100
dra2 = dra1 % 100
if da2 >= 1:
    vetor_a.append(da2)
else:
    vetor_a.append(0)

da3 = dra2 // 10
dra3 = dra2 % 10
if da3 >= 1:
    vetor_a.append(da3)
else:
    vetor_a.append(0)

da4 = dra3 // 1
if da4 >= 1:
    vetor_a.append(da4)
else:
    vetor_a.append(0)

#Criando Vetor B

db1 = b // 1000
drb1 = b % 1000
if db1 >= 1:
    vetor_b.append(db1)
else:
    vetor_b.append(0)

db2 = drb1 // 100
drb2 = drb1 % 100
if db2 >= 1:
    vetor_b.append(db2)
else:
    vetor_b.append(0)

db3 = drb2 // 10
drb3 = drb2 % 10
if db3 >= 1:
    vetor_b.append(db3)
else:
    vetor_b.append(0)

db4 = drb3 // 1
if db4 >= 1:
    vetor_b.append(db4)
else:
    vetor_b.append(0)



for n in range(4):
    soma = vetor_a[n] + vetor_b[n]
    if soma > 10:
        soma = soma - 10
    vetor_final.append(soma)

print(f'O Vetor A é {vetor_a}')
print(f'O Vetor B é {vetor_b}')
print(f'O Vetor soma dos vetores é {vetor_final}')


"""
36)

Leia um vetor com 10 números reais, ordenos os elemnetos deste vetor, e no final
escreva os elemtnos do vetor ordenado.


"""
vetor = []

while len(vetor) <10:
    valor = float(input(f'Entre com a posição {len(vetor) + 1}/10: '))
    vetor.append(valor)

(vetor.sort())
print(f'O vetor ordenado é {vetor}')



"""
37)

Considere um vetor A com 11 elementos, onde A1<A2<A3...A6>A7>A8>...>A11

ou seja, está ordenado em ordem crescente até o 6o elemento e a partir deste está ordenado em ordem decrescente.
Dado o vetor da questão anterior, proponha um algorítimo para ordenar os elementos.


"""
vetor = []
vetor_final = []

while len(vetor) <11:
    valor = float(input(f'Entre com a posição {len(vetor) + 1}/11: '))
    vetor.append(valor)

(vetor.sort())

for i in vetor[0:5]:
    vetor_final.append(i)

for i in vetor[10:4:-1]:
    vetor_final.append(i)

print(f'O vetor ordenado é {vetor_final}')

"""
38)

Peça ao usuário para digitar dez valores numéricos e ordene por ordem crescente esses valores,
guardando-os num vetor. Ordene o valor assim que ele for digitado. Mostre ao final na tela os valores
em ordem.

"""
vetor = []

while len(vetor) < 10:
    valor = int(input(f'Entre com a posição {len(vetor) + 1}/10: '))
    vetor.append(valor)
    (vetor.sort())
    print(vetor)

print(f'O vetor ordenado é {vetor}')

"""
39)

Escreva um programa que leia um número inteiro positivo e em seguida imprima n linhas do chamado Triângulo de Pascal

"""
n = int(input("Digite o número de linhas do Triângulo de Pascal: "))

# Gerando o Triângulo de Pascal
for i in range(n):
    valor = 1  # O primeiro valor de cada linha é sempre 1
    for j in range(i + 1):
        # Imprime cada valor da linha
        print(valor, end=" ")
        # Atualizando o valor usando a fórmula: C(i, j+1) = C(i, j) * (i - j) / (j + 1)
        valor = valor * (i - j) // (j + 1)
    # Quebra de linha após cada linha do triângulo
    print()

##Resolvido pelo chat-gpt

"""
40)

Leia uma matriz 4x4, conte e escreva quantos valores maiores que 10
ela possui

"""
# Inicializando a matriz 4x4
matriz = []
contador = 0

# Lendo a matriz 4x4
for i in range(4):
    linha = []
    for j in range(4):
        valor = int(input(f"Digite o valor para a posição [{i+1}][{j+1}]: "))
        if valor > 10:
            contador = contador +1
        linha.append(valor)
    matriz.append(linha)

print(matriz)
print(f'A matriz tem {contador} números maiores que 10')

